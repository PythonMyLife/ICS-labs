                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 808d00000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Student ID : 517030910183
                            | # Name : Hou Zhengtong
                            | # Describe how and why you modified the baseline code.
                            | # 1: change jxx stuctures to avoid load/use hazzard
                            | # 2: loop unrolling
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 30fc0800000000000000 | 	irmovq $8,%r12
0x049: 30fd0100000000000000 | 	irmovq $1,%r13
0x053: 708300000000000000   | 	jmp Whether
                            | 
0x05c: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x070: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x072: 717d00000000000000   | 	jle Npos		# if so, goto Npos:
0x07b: 60d0                 | 	addq %r13, %rax		# count++
0x07d:                      | Npos:	
0x07d: 60c7                 | 	addq %r12, %rdi		# src++
0x07f: 60c6                 | 	addq %r12, %rsi		# dst++
0x081: 61d2                 | 	subq %r13, %rdx		# len-- and setcc
0x083:                      | Whether:
0x083: 765c00000000000000   | 	jg Loop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
                            | 
0x08c:                      | Done:
0x08c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x08d:                      | End:
                            | #/* $end ncopy-ys */
0x08d:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 28.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x08d:                      | check:
                            | 	# Return value test
0x08d: 30fa1c00000000000000 | 	irmovq $28,%r10
0x097: 61a0                 | 	subq %r10,%rax
0x099: 73b500000000000000   | 	je checkb
0x0a2: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x0ac: 70f301000000000000   | 	jmp cdone
0x0b5:                      | checkb:
                            | 	# Code length check
0x0b5: 30f08d00000000000000 | 	irmovq EndFun,%rax
0x0bf: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x0c9: 6120                 | 	subq %rdx,%rax
0x0cb: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x0d5: 6102                 | 	subq %rax,%rdx
0x0d7: 75f300000000000000   | 	jge checkm
0x0e0: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x0ea: 70f301000000000000   | 	jmp cdone
0x0f3:                      | checkm:
0x0f3: 30f20804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x0fd: 30f3f801000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x107: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x111: 6277                 | 	andq %rdi,%rdi
0x113: 737101000000000000   | 	je checkpre         # Skip check if count = 0
0x11c:                      | mcloop:
0x11c: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x126: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x130: 6160                 | 	subq %rsi,%rax
0x132: 734e01000000000000   | 	je  mok
0x13b: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x145: 70f301000000000000   | 	jmp cdone
0x14e:                      | mok:
0x14e: 30f00800000000000000 | 	irmovq $8,%rax
0x158: 6002                 | 	addq %rax,%rdx	  # dest ++
0x15a: 6003                 | 	addq %rax,%rbx    # src++
0x15c: 30f00100000000000000 | 	irmovq $1,%rax
0x166: 6107                 | 	subq %rax,%rdi    # cnt--
0x168: 761c01000000000000   | 	jg mcloop
0x171:                      | checkpre:
                            | 	# Check for corruption
0x171: 30f20004000000000000 | 	irmovq Predest,%rdx
0x17b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x185: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x18f: 6120                 | 	subq %rdx,%rax
0x191: 73ad01000000000000   | 	je checkpost
0x19a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x1a4: 70f301000000000000   | 	jmp cdone
0x1ad:                      | checkpost:
                            | 	# Check for corruption
0x1ad: 30f20806000000000000 | 	irmovq Postdest,%rdx
0x1b7: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x1c1: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x1cb: 6120                 | 	subq %rdx,%rax
0x1cd: 73e901000000000000   | 	je checkok
0x1d6: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x1e0: 70f301000000000000   | 	jmp cdone
0x1e9:                      | checkok:
                            | 	# Successful checks
0x1e9: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x1f3:                      | cdone:
0x1f3: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1f8:                      | 	.align 8
0x1f8:                      | src:
0x1f8: ffffffffffffffff     | 	.quad -1
0x200: feffffffffffffff     | 	.quad -2
0x208: fdffffffffffffff     | 	.quad -3
0x210: fcffffffffffffff     | 	.quad -4
0x218: 0500000000000000     | 	.quad 5
0x220: 0600000000000000     | 	.quad 6
0x228: f9ffffffffffffff     | 	.quad -7
0x230: f8ffffffffffffff     | 	.quad -8
0x238: f7ffffffffffffff     | 	.quad -9
0x240: 0a00000000000000     | 	.quad 10
0x248: f5ffffffffffffff     | 	.quad -11
0x250: 0c00000000000000     | 	.quad 12
0x258: f3ffffffffffffff     | 	.quad -13
0x260: f2ffffffffffffff     | 	.quad -14
0x268: 0f00000000000000     | 	.quad 15
0x270: 1000000000000000     | 	.quad 16
0x278: efffffffffffffff     | 	.quad -17
0x280: eeffffffffffffff     | 	.quad -18
0x288: edffffffffffffff     | 	.quad -19
0x290: 1400000000000000     | 	.quad 20
0x298: 1500000000000000     | 	.quad 21
0x2a0: 1600000000000000     | 	.quad 22
0x2a8: 1700000000000000     | 	.quad 23
0x2b0: 1800000000000000     | 	.quad 24
0x2b8: e7ffffffffffffff     | 	.quad -25
0x2c0: 1a00000000000000     | 	.quad 26
0x2c8: 1b00000000000000     | 	.quad 27
0x2d0: 1c00000000000000     | 	.quad 28
0x2d8: 1d00000000000000     | 	.quad 29
0x2e0: 1e00000000000000     | 	.quad 30
0x2e8: e1ffffffffffffff     | 	.quad -31
0x2f0: e0ffffffffffffff     | 	.quad -32
0x2f8: 2100000000000000     | 	.quad 33
0x300: deffffffffffffff     | 	.quad -34
0x308: ddffffffffffffff     | 	.quad -35
0x310: dcffffffffffffff     | 	.quad -36
0x318: dbffffffffffffff     | 	.quad -37
0x320: 2600000000000000     | 	.quad 38
0x328: d9ffffffffffffff     | 	.quad -39
0x330: d8ffffffffffffff     | 	.quad -40
0x338: d7ffffffffffffff     | 	.quad -41
0x340: d6ffffffffffffff     | 	.quad -42
0x348: d5ffffffffffffff     | 	.quad -43
0x350: d4ffffffffffffff     | 	.quad -44
0x358: 2d00000000000000     | 	.quad 45
0x360: 2e00000000000000     | 	.quad 46
0x368: d1ffffffffffffff     | 	.quad -47
0x370: 3000000000000000     | 	.quad 48
0x378: cfffffffffffffff     | 	.quad -49
0x380: ceffffffffffffff     | 	.quad -50
0x388: cdffffffffffffff     | 	.quad -51
0x390: 3400000000000000     | 	.quad 52
0x398: 3500000000000000     | 	.quad 53
0x3a0: caffffffffffffff     | 	.quad -54
0x3a8: 3700000000000000     | 	.quad 55
0x3b0: c8ffffffffffffff     | 	.quad -56
0x3b8: c7ffffffffffffff     | 	.quad -57
0x3c0: 3a00000000000000     | 	.quad 58
0x3c8: c5ffffffffffffff     | 	.quad -59
0x3d0: 3c00000000000000     | 	.quad 60
0x3d8: 3d00000000000000     | 	.quad 61
0x3e0: 3e00000000000000     | 	.quad 62
0x3e8: c1ffffffffffffff     | 	.quad -63
0x3f0: c0ffffffffffffff     | 	.quad -64
0x3f8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608:                      | Postdest:
0x608: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x610:                      | .align 8
                            | # Run time stack
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
                            | 
0x690:                      | Stack:
